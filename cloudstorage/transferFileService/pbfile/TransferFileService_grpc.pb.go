// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: TransferFileService.proto

package pbfile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileTransferServiceClient is the client API for FileTransferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileTransferServiceClient interface {
	// 上传文件
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (FileTransferService_UploadFileClient, error)
	// 下载文件
	DownloadFile(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (FileTransferService_DownloadFileClient, error)
	// 显示用户空间
	ShowDir(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*DirResponse, error)
	CreateDir(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadRequest, error)
	DeleteFile(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadRequest, error)
}

type fileTransferServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileTransferServiceClient(cc grpc.ClientConnInterface) FileTransferServiceClient {
	return &fileTransferServiceClient{cc}
}

func (c *fileTransferServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (FileTransferService_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileTransferService_ServiceDesc.Streams[0], "/pbfile.FileTransferService/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileTransferServiceUploadFileClient{stream}
	return x, nil
}

type FileTransferService_UploadFileClient interface {
	Send(*UploadRequest) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type fileTransferServiceUploadFileClient struct {
	grpc.ClientStream
}

func (x *fileTransferServiceUploadFileClient) Send(m *UploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileTransferServiceUploadFileClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileTransferServiceClient) DownloadFile(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (FileTransferService_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileTransferService_ServiceDesc.Streams[1], "/pbfile.FileTransferService/DownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileTransferServiceDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileTransferService_DownloadFileClient interface {
	Recv() (*DownloadResponse, error)
	grpc.ClientStream
}

type fileTransferServiceDownloadFileClient struct {
	grpc.ClientStream
}

func (x *fileTransferServiceDownloadFileClient) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileTransferServiceClient) ShowDir(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*DirResponse, error) {
	out := new(DirResponse)
	err := c.cc.Invoke(ctx, "/pbfile.FileTransferService/ShowDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferServiceClient) CreateDir(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadRequest, error) {
	out := new(UploadRequest)
	err := c.cc.Invoke(ctx, "/pbfile.FileTransferService/CreateDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferServiceClient) DeleteFile(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadRequest, error) {
	out := new(UploadRequest)
	err := c.cc.Invoke(ctx, "/pbfile.FileTransferService/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileTransferServiceServer is the server API for FileTransferService service.
// All implementations must embed UnimplementedFileTransferServiceServer
// for forward compatibility
type FileTransferServiceServer interface {
	// 上传文件
	UploadFile(FileTransferService_UploadFileServer) error
	// 下载文件
	DownloadFile(*DownloadRequest, FileTransferService_DownloadFileServer) error
	// 显示用户空间
	ShowDir(context.Context, *UploadRequest) (*DirResponse, error)
	CreateDir(context.Context, *UploadRequest) (*UploadRequest, error)
	DeleteFile(context.Context, *UploadRequest) (*UploadRequest, error)
	mustEmbedUnimplementedFileTransferServiceServer()
}

// UnimplementedFileTransferServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileTransferServiceServer struct {
}

func (UnimplementedFileTransferServiceServer) UploadFile(FileTransferService_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFileTransferServiceServer) DownloadFile(*DownloadRequest, FileTransferService_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedFileTransferServiceServer) ShowDir(context.Context, *UploadRequest) (*DirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowDir not implemented")
}
func (UnimplementedFileTransferServiceServer) CreateDir(context.Context, *UploadRequest) (*UploadRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDir not implemented")
}
func (UnimplementedFileTransferServiceServer) DeleteFile(context.Context, *UploadRequest) (*UploadRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedFileTransferServiceServer) mustEmbedUnimplementedFileTransferServiceServer() {}

// UnsafeFileTransferServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileTransferServiceServer will
// result in compilation errors.
type UnsafeFileTransferServiceServer interface {
	mustEmbedUnimplementedFileTransferServiceServer()
}

func RegisterFileTransferServiceServer(s grpc.ServiceRegistrar, srv FileTransferServiceServer) {
	s.RegisterService(&FileTransferService_ServiceDesc, srv)
}

func _FileTransferService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileTransferServiceServer).UploadFile(&fileTransferServiceUploadFileServer{stream})
}

type FileTransferService_UploadFileServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*UploadRequest, error)
	grpc.ServerStream
}

type fileTransferServiceUploadFileServer struct {
	grpc.ServerStream
}

func (x *fileTransferServiceUploadFileServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileTransferServiceUploadFileServer) Recv() (*UploadRequest, error) {
	m := new(UploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileTransferService_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileTransferServiceServer).DownloadFile(m, &fileTransferServiceDownloadFileServer{stream})
}

type FileTransferService_DownloadFileServer interface {
	Send(*DownloadResponse) error
	grpc.ServerStream
}

type fileTransferServiceDownloadFileServer struct {
	grpc.ServerStream
}

func (x *fileTransferServiceDownloadFileServer) Send(m *DownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FileTransferService_ShowDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServiceServer).ShowDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbfile.FileTransferService/ShowDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServiceServer).ShowDir(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransferService_CreateDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServiceServer).CreateDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbfile.FileTransferService/CreateDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServiceServer).CreateDir(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransferService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbfile.FileTransferService/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServiceServer).DeleteFile(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileTransferService_ServiceDesc is the grpc.ServiceDesc for FileTransferService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileTransferService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbfile.FileTransferService",
	HandlerType: (*FileTransferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShowDir",
			Handler:    _FileTransferService_ShowDir_Handler,
		},
		{
			MethodName: "CreateDir",
			Handler:    _FileTransferService_CreateDir_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _FileTransferService_DeleteFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _FileTransferService_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _FileTransferService_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "TransferFileService.proto",
}
